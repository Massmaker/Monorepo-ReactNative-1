{"version":3,"sources":["BottomTabItem.tsx"],"names":["BottomTabBarItem","focused","route","label","icon","button","children","style","rest","accessibilityLabel","testID","onPress","onLongPress","horizontal","customActiveTintColor","activeTintColor","customInactiveTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","showIcon","allowFontScaling","labelStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","styles","labelBeside","labelBeneath","renderIcon","activeOpacity","inactiveOpacity","iconHorizontal","iconVertical","scene","backgroundColor","accessibilityRole","accessibilityStates","tab","tabLandscape","tabPortrait","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","height","textAlign","fontSize","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TouchableWithoutFeedback,\n  Animated,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport { BottomTabBarButtonProps } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: () => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to show the icon for the tab.\n   */\n  showIcon?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  button = ({ children, style, ...rest }: BottomTabBarButtonProps) => (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  ),\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  showIcon = true,\n  allowFontScaling,\n  labelStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text)\n          .mix(Color(colors.card), 0.5)\n          .hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            showIcon && horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'string') {\n      return label;\n    }\n\n    return label({ focused, color });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (showIcon === false || icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        size={horizontal ? 17 : 24}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={horizontal ? styles.iconHorizontal : styles.iconVertical}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  iconVertical: {\n    flex: 1,\n  },\n  iconHorizontal: {\n    height: '100%',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 11,\n    marginBottom: 1.5,\n  },\n  labelBeside: {\n    fontSize: 12,\n    marginLeft: 20,\n  },\n});\n"]}