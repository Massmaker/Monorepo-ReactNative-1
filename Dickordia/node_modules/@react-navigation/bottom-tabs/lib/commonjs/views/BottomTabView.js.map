{"version":3,"sources":["BottomTabView.tsx"],"names":["SceneContent","isFocused","children","colors","styles","content","backgroundColor","background","BottomTabView","state","loaded","props","index","renderTabBar","tabBar","tabBarOptions","navigation","descriptors","route","routes","descriptor","key","options","tabBarVisible","lazy","unmountInactiveScreens","container","pages","map","includes","StyleSheet","absoluteFill","render","nextProps","prevState","React","Component","defaultProps","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport { TabNavigationState } from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: number[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.state.index],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const { state, descriptors, lazy, unmountInactiveScreens } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <SafeAreaProviderCompat>\n        <View style={styles.container}>\n          <ScreenContainer style={styles.pages}>\n            {routes.map((route, index) => {\n              if (unmountInactiveScreens && index !== state.index) {\n                return null;\n              }\n\n              if (lazy && !loaded.includes(index)) {\n                // Don't render a screen if we've never navigated to it\n                return null;\n              }\n\n              const isFocused = state.index === index;\n\n              return (\n                <ResourceSavingScene\n                  key={route.key}\n                  style={StyleSheet.absoluteFill}\n                  isVisible={isFocused}\n                >\n                  <SceneContent isFocused={isFocused}>\n                    {descriptors[route.key].render()}\n                  </SceneContent>\n                </ResourceSavingScene>\n              );\n            })}\n          </ScreenContainer>\n          {this.renderTabBar()}\n        </View>\n      </SafeAreaProviderCompat>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]}